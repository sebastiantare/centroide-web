generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model articles {
  article_hash      String          @id
  article_title     String?
  category          String?
  publish_date      DateTime?       @db.Timestamp(6)
  article_body      String?
  raw_content       String?
  source_entity     String?
  article_link      String?
  generated_summary String?
  negative_score    Decimal?        @db.Decimal
  importance_score  Decimal?        @db.Decimal
  view_count        Decimal?        @db.Decimal
  header_images     header_images[]
}

model header_images {
  article_hash String?
  image_hash   String    @id
  s3_link      String?
  articles     articles? @relation(fields: [article_hash], references: [article_hash], onDelete: NoAction, onUpdate: NoAction)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
